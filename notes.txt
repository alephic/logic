Apply:

  func arg
  f x
  f x y
  f (g x) y

Symbolic constants behave as constructors when applied
Lambdas behave as functions when applied
Lambda:

  <arg> body
  <x> x

Declarations establish relations within their body
Lambdas allow quantified variables in relations
Declaration:

  {declaration} body
  {c x y} f x
  {<x> c x a} f x

Constraints limit the codomain of their body by requiring
a certain relation to hold on the variables in the domain
Constraint:

  [constraint] body

The wildcard value represents all possible values:

  *

The arbitrary value represents an anonymous, unique value:

  ?

Using a lambda applied to an arbitrary value, it is possible to give anonymous relations
locally-scoped names, as in this example, where an anonymous relation "a" is used to
produce a disjoint value within the "or" function:

> :def or <x> <y> (<a> {a x} {a y} (<z> [a z] z) *) ?
> or a b
a | b

